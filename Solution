import java.util.Arrays;

public class TwoSum {
    public static void main(String[] args) {
        int[] nums = {1, 3, 2, 2, -4, 6, -2, 8};
        int target = 4;


        int[][] result = findPairsWithSum(nums, target);
        System.out.println("Pairs of target:");
        printArray(result);
        
        
        int[] sortedArray = sortAndFlattenArray(result);
        System.out.println("Sorted Array:");
        System.out.println(Arrays.toString(sortedArray));

     
        int doubleTarget = target * 2;
        int[][] doubleTargetResult = findPairsWithSum(sortedArray, doubleTarget);
        System.out.println("Pairs of doubleTarget:");
        printArray(doubleTargetResult);


    }
    
    
// Functionality to Finding the pairs

    public static int[][] findPairsWithSum(int[] nums, int target) {
        int[][] result = new int[nums.length][2];
        int count = 0;

        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    result[count][0] = nums[i];
                    result[count][1] = nums[j];
                    count++;
                }
            }
        }

        return Arrays.copyOf(result, count);
    }
    

// Functionality to Print in 2d Array

    public static void printArray(int[][] array) {
        for (int[] pair : array) {
            System.out.print("[" + pair[0] + ", " + pair[1] + "]");
        }
        System.out.println();
    }
    
    
// Functionality to Short the Array
    
    public static int[] sortAndFlattenArray(int[][] result) {
        int totalElements = 0;
        for (int[] row : result) {
            totalElements += row.length;
        }

        int[] flattenedArray = new int[totalElements];
        int index = 0;

        for (int[] row : result) {
            for (int element : row) {
                flattenedArray[index] = element;
                index++;
            }
        }

        Arrays.sort(flattenedArray);

        return flattenedArray;
    }

}
